1. HolidayRepository.class 

- We can not convert from iterable to stream therefore we need to convert from Iterable to the list.
==> we want to get the list of Object. 

Example:

Iterable<Holiday> holidays = holidaysRepository.findAll();

Convert from Iterable to List:

List<Holiday> holidayList = StreamSupport.stream(holidays.spliterator(), false)
				.collect(Collectors.toList());

by using : StreamSupport.stream we can convert from Iterable<Holiday> to the List<Holiday>

============================

@Repository
public interface HolidaysRepository extends CrudRepository<Holiday, String>{


}




=============================

+ In HolidayService.class 

in order to create find method from spring data JPA 

Iterable<Holiday> holidays = holidaysRepository.findAll();
		List<Holiday> holidayList = StreamSupport.stream(holidays.spliterator(), false)
				.collect(Collectors.toList());

		Holiday.Type[] types = Holiday.Type.values();
		
		for(Holiday.Type type : types) {
			model.addAttribute(type.toString(), 
					holidayList.stream().filter(holiday -> holiday.getType().equals(type))
					.collect(Collectors.toList())
					);			
		}
		
		return "holidays.html";
	}


2. ContactRepository.class 

@Repository
public interface ContactRepository extends CrudRepository<Contact, Integer>{


}

+ in the service: ContactService

//Save Method 
	
	public boolean saveMessageDetails(Contact contact) {
		boolean isSaved = false;
		contact.setStatus(EazySchoolConstants.OPEN);
		contact.setCreatedBy(EazySchoolConstants.ANOUNYMOUS);
		contact.setCreatedAt(LocalDateTime.now());
		Contact saveContact = contactRepository.save(contact);
		if(null!= saveContact && saveContact.getContactId()>0) {
			isSaved = true;
		}
		return isSaved;
	}


// update Method 
	public boolean updateMsgStatus(int contactId, String updatedBy) {
		boolean isUpdated = false;
		Optional<Contact> contact = contactRepository.findById(contactId);
		// after we success find the contact By Id we want to update the status
		contact.ifPresent(contact1 -> {
			contact1.setStatus(EazySchoolConstants.CLOSE);
			contact1.setUpdatedBy(updatedBy);
			contact1.setUpdatedAt(LocalDateTime.now());
		});
		Contact updateContact = contactRepository.save(contact.get()); // contact.get() because it is optional so we
																		// want to get only if the contact have

		if (updateContact != null && updateContact.getUpdatedBy() != null) {
			isUpdated = true;
		}
		return isUpdated;
	}


** These above two method we have the method from the CrudRepository but for the findMsgsWithOpenStatus 
We don't have the method inside CrudRepository. So inside Spring data JPA if we want to use Qurey Where 

We just only create the name that Spring data JPA provide that all : 

Concept :

- Derived Query Methods in Spring Data JPA: We just defind what you want and the Spring data JPA will create the method for us. 

Instead of using "Where condition"

Ex1: find person by last name

We have POJO class Person and it have filed : lastName; 
==> if we want to find the person by lastName we can follow the convention as below: 

List<Person> findByLastname(String lastName);

condition = WHERE = "lastName"; ( it is working on runtime) 

Ex2: find person by email 

Person findByEmail(String email)


Ex3: find person by email and last name
Person findByEmailAndLastname(String email, String lastName);

===================================================================================

Pratic in the ContacService findBystatus 

1. go to interface ContactRepository : write the abstrut method 

@Repository
public interface ContactRepository extends CrudRepository<Contact, Integer>{

	List<Contact> findByStatus(String status);
	// because it will return many of contact that have status open or close that why we need List<Contact> to store it
}

2. in the ContactService

	//find Method
	public List<Contact> findMsgsWithOpenStatus() {
		List<Contact> contactMsgs = contactRepository.findByStatus(EazySchoolConstants.OPEN);
		return contactMsgs;
	}

*** Last we need to add the annotation to the Application *** 

- When the project start: tell the spring to communicate with the Repository and our model 

@EnableJpaRepositories("com.eazybytes.eazyschool.repository") 
@EntityScan("com.eazybytes.eazyschool.model")

==============================================================================================

@SpringBootApplication
@EnableJpaRepositories("com.eazybytes.eazyschool.repository")
@EntityScan("com.eazybytes.eazyschool.model")
public class EazyschoolApplication {

	public static void main(String[] args) {
		SpringApplication.run(EazyschoolApplication.class, args);
	}

}


===============================================================================================

+ application.properties

spring.jpa.show-sql=true // Show the sql in the console  
spring.jpa.properties.hibernate.format_sql=true 

These two property we can see how the query from JPA is working in the console 

--- Console

Finished Spring Data repository scanning in 34 ms. Found 2 JPA repository interfaces. 
- Explain it found 2 JAP ( contact and holiday model) 


































































































































































