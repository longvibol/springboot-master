Gold : want to disable the properties with the Profiles (dev, uat, prod)

- In the uat we don't want the testing difficult to do login to the page so want to disable the login 

+ មានន័យថាបើវាជា Prod យើងត្រូវការ login user 
+ but if it is not !Prod : No need to card about the login 

---------------

1. Create Two class that Authenthication 

- Prod 

@Profile("prod")


---------------------------

package com.eazybytes.eazyschool.security;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.eazybytes.eazyschool.model.Person;
import com.eazybytes.eazyschool.model.Roles;
import com.eazybytes.eazyschool.repository.PersonRepository;

@Component
@Profile("prod")
public class EazySchoolUsernamePwdAuthenticationProvider implements AuthenticationProvider{
	
	@Autowired
	private PersonRepository personRepository;
	
	 @Autowired
	    private PasswordEncoder passwordEncoder;

	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		String email = authentication.getName();
		String pwd = authentication.getCredentials().toString();
		
		// fetching person authentication from database 		
		Person person= personRepository.readByEmail(email);
		
		if(null!= person && person.getPersonId()>0 && passwordEncoder.matches(pwd, person.getPwd())) {
			return new UsernamePasswordAuthenticationToken(email, null, getGrantedAuthorities(person.getRoles()));
		}else {
			throw new BadCredentialsException("Invalid credentials!");
		}
			
	}

	private List<GrantedAuthority> getGrantedAuthorities(Roles roles) {
		List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
		grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_"+roles.getRoleName()));
		return grantedAuthorities;
	}

	
	//this one is wokring first 
	@Override
	public boolean supports(Class<?> authentication) {
		 return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}
	


}


----------------------------------------

2. with !Prod


package com.eazybytes.eazyschool.security;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.eazybytes.eazyschool.model.Person;
import com.eazybytes.eazyschool.model.Roles;
import com.eazybytes.eazyschool.repository.PersonRepository;

@Component
@Profile("!prod")
public class EazySchoolNonProdUsernamePwdAuthenticationProvider implements AuthenticationProvider{
	
	@Autowired
	private PersonRepository personRepository;
	
	 @Autowired
	    private PasswordEncoder passwordEncoder;

	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		String email = authentication.getName();
		String pwd = authentication.getCredentials().toString();
		
		// fetching person authentication from database 		
		Person person= personRepository.readByEmail(email);
		
		// we remove the condition that need to get the password login 
		if(null!= person && person.getPersonId()>0 ) {
			return new UsernamePasswordAuthenticationToken(email, null, getGrantedAuthorities(person.getRoles()));
		}else {
			throw new BadCredentialsException("Invalid credentials!");
		}
			
	}

	private List<GrantedAuthority> getGrantedAuthorities(Roles roles) {
		List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
		grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_"+roles.getRoleName()));
		return grantedAuthorities;
	}


	@Override
	public boolean supports(Class<?> authentication) {
		 return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}
	


}

==========================================

3. in the application.properties 

spring.config.import=application_prod.properties,application_uat.properties
spring.profiles.active=!prod


























